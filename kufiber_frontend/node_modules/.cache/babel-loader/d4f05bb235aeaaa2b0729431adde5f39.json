{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\fiberproj\\\\kufiber_frontend\\\\src\\\\components\\\\FileUpload.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport UploadService from \"./FileUploadService\";\nimport { InputGroup, Accordion, CardGroup, Carousel, ListGroup, Table, Badge, Navbar, Nav, Form, Button, FormControl, Card, Container, Row, Col, DropdownButton, Dropdown, Select, Option, Jumbotron } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst UploadFiles = () => {\n  _s();\n\n  const [selectedFiles, setSelectedFiles] = useState(undefined);\n  const [currentFile, setCurrentFile] = useState(undefined);\n  const [progress, setProgress] = useState(0);\n  const [message, setMessage] = useState(\"\");\n  const [fileInfos, setFileInfos] = useState([]);\n\n  const selectFile = event => {\n    setSelectedFiles(event.target.files);\n  };\n\n  useEffect(() => {\n    UploadService.getFiles().then(response => {\n      setFileInfos(response.data);\n    });\n  }, []); //const [imgid, setimgid] = useState('');\n\n  const handleSubmit = () => {\n    /*if(window.confirm('are  you sure?')){\r\n     \r\n      const blog = {imgid}\r\n            fetch('/upload', {\r\n        method: 'POST',\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(blog)\r\n      }).then(() => {\r\n        console.log('new blog added');\r\n      })\r\n    }*/\n    //const upload = () => {\n    let currentFile = selectedFiles[0];\n    setProgress(0);\n    setCurrentFile(currentFile);\n    UploadService.upload(currentFile, event => {\n      setProgress(Math.round(100 * event.loaded / event.total));\n    }).then(response => {\n      setMessage(response.data.message);\n      return UploadService.getFiles();\n    }).then(files => {\n      setFileInfos(files.data);\n    }).catch(() => {\n      setProgress(0);\n      setMessage(\"Could not upload the file!\");\n      setCurrentFile(undefined);\n    });\n    setSelectedFiles(undefined); //};\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-light\",\n      role: \"alert\",\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-header\",\n        children: \"List of Files\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        className: \"list-group list-group-flush\",\n        children: fileInfos && fileInfos.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"list-group-item\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: file.url,\n            children: file.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UploadFiles, \"rp6w94naj8+7ysk2gK1qQ2/xWj4=\");\n\n_c = UploadFiles;\nexport default UploadFiles;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadFiles\");","map":{"version":3,"sources":["C:/Users/user/Desktop/fiberproj/kufiber_frontend/src/components/FileUpload.js"],"names":["React","useState","useEffect","UploadService","InputGroup","Accordion","CardGroup","Carousel","ListGroup","Table","Badge","Navbar","Nav","Form","Button","FormControl","Card","Container","Row","Col","DropdownButton","Dropdown","Select","Option","Jumbotron","UploadFiles","selectedFiles","setSelectedFiles","undefined","currentFile","setCurrentFile","progress","setProgress","message","setMessage","fileInfos","setFileInfos","selectFile","event","target","files","getFiles","then","response","data","handleSubmit","upload","Math","round","loaded","total","catch","map","file","index","url","name"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport UploadService from \"./FileUploadService\";\r\nimport { InputGroup,Accordion,CardGroup,Carousel,ListGroup,Table,Badge,Navbar,Nav,Form,Button,FormControl,Card,Container,Row,Col,DropdownButton,Dropdown,Select,Option,Jumbotron} from 'react-bootstrap';\r\n\r\nconst UploadFiles = () => {\r\n\r\n    const [selectedFiles, setSelectedFiles] = useState(undefined);\r\n    const [currentFile, setCurrentFile] = useState(undefined);\r\n    const [progress, setProgress] = useState(0);\r\n    const [message, setMessage] = useState(\"\");\r\n  \r\n    const [fileInfos, setFileInfos] = useState([]);\r\n\r\n    const selectFile = (event) => {\r\n        setSelectedFiles(event.target.files);\r\n      };\r\n\r\n    useEffect(() => {\r\n        UploadService.getFiles().then((response) => {\r\n          setFileInfos(response.data);\r\n        });\r\n      }, []);\r\n\r\n    \r\n    //const [imgid, setimgid] = useState('');\r\n\r\n    const handleSubmit = () => {\r\n\r\n      /*if(window.confirm('are  you sure?')){\r\n       \r\n        const blog = {imgid}\r\n    \r\n        fetch('/upload', {\r\n          method: 'POST',\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(blog)\r\n        }).then(() => {\r\n          console.log('new blog added');\r\n        })\r\n      }*/\r\n\r\n      //const upload = () => {\r\n        let currentFile = selectedFiles[0];\r\n    \r\n        setProgress(0);\r\n        setCurrentFile(currentFile);\r\n    \r\n        UploadService.upload(currentFile, (event) => {\r\n          setProgress(Math.round((100 * event.loaded) / event.total));\r\n        })\r\n          .then((response) => {\r\n            setMessage(response.data.message);\r\n            return UploadService.getFiles();\r\n          })\r\n          .then((files) => {\r\n            setFileInfos(files.data);\r\n          })\r\n          .catch(() => {\r\n            setProgress(0);\r\n            setMessage(\"Could not upload the file!\");\r\n            setCurrentFile(undefined);\r\n          });\r\n    \r\n        setSelectedFiles(undefined);\r\n    //};\r\n    }\r\n    \r\n    \r\n  \r\n    return (\r\n        <div>\r\n      {/*{currentFile && (\r\n        <div className=\"progress\">\r\n          <div\r\n            className=\"progress-bar progress-bar-info progress-bar-striped\"\r\n            role=\"progressbar\"\r\n            aria-valuenow={progress}\r\n            aria-valuemin=\"0\"\r\n            aria-valuemax=\"100\"\r\n            style={{ width: progress + \"%\" }}\r\n          >\r\n            {progress}%\r\n          </div>\r\n        </div>\r\n      )}\r\n        \r\n        <form>\r\n        <label className=\"btn btn-default\">\r\n\r\n        <InputGroup size=\"sm\" className=\"mb-3\">\r\n            <InputGroup.Prepend size=\"sm\">\r\n            <InputGroup.Text size=\"sm\">file</InputGroup.Text>\r\n            </InputGroup.Prepend >\r\n            <FormControl \r\n            type=\"file\" \r\n            required \r\n            //value={rid}\r\n            size=\"sm\"\r\n            onChange={selectFile}\r\n            />\r\n        </InputGroup> \r\n        \r\n        <InputGroup size=\"sm\" className=\"mb-3\">\r\n            <InputGroup.Prepend size=\"sm\">\r\n            <InputGroup.Text size=\"sm\">id</InputGroup.Text>\r\n            </InputGroup.Prepend >\r\n            <FormControl \r\n            type=\"string\" \r\n            required \r\n            //value={imgid}\r\n            size=\"sm\"\r\n            \r\n            //onChange={(e) => setimgid(e.target.value)}\r\n            />\r\n        </InputGroup>                \r\n\r\n        </label>\r\n        </form>\r\n\r\n      <button\r\n        className=\"btn btn-success\"\r\n        disabled={!selectedFiles}\r\n        onClick={handleSubmit}\r\n      >\r\n        Upload\r\n      </button>\r\n      */}\r\n      <div>\r\n      \r\n      </div>\r\n\r\n      <div className=\"alert alert-light\" role=\"alert\">\r\n        {message}\r\n      </div>\r\n\r\n      <div className=\"card\">\r\n        <div className=\"card-header\">List of Files</div>\r\n        <ul className=\"list-group list-group-flush\">\r\n          {fileInfos &&\r\n            fileInfos.map((file, index) => (\r\n              <li className=\"list-group-item\" key={index}>\r\n                <a href={file.url}>{file.name}</a>\r\n              </li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default UploadFiles;"]},"metadata":{},"sourceType":"module"}